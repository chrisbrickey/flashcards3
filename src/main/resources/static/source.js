$(document).ready(function () {

var colorArray=["#086375", "#0C91AC", "#546a76","#88a0a8","#679436","#A5BE00", "#000000", "#4C5B5C"];
var cardState;
var currentQuestion=0;
var bank=new Array;

loadGame();

function loadGame(){
// TO USE CSV SOURCE:
  $.ajax({
    url: 'sample.csv',
    dataType: 'text',
  }).done(successFunction);

// TO USE JSON SOURCE:
// $.getJSON("input.json", function(data) {
//  buildBankFromJson(data);
//  showNewCard();
// })
}

function successFunction(data) {
  buildBankFromCsv(data);
  showNewCard();
}

function showNewCard(){
 cardState=0;
 var color1=colorArray[0];
 var color2=colorArray[1]
 $("#cardArea").empty();
 $("#cardArea").append('<div id="card1" class="card">' + bank[currentQuestion][0] + '</div>');
 $("#cardArea").append('<div id="card2" class="card">' + bank[currentQuestion][1] + '</div>');
 $("#card1").css("background-color",color1);
 $("#card2").css("background-color",color2);
 $("#card2").css("top","200px");
 $("#cardArea").on("click",function(){
  if(cardState!=1){
   cardState=1;
   //togglePosition();
   $("#card1").animate({top: "-=200"}, 150, function() {cardState=0;togglePosition();});
   $("#card2").animate({top: "-=200"}, 150, function() {togglePosition2();});
  }//if
 });//click function
 currentQuestion++;
 $("#buttonArea").empty();
 $("#buttonArea").append('<div id="nextButton">next card</div>');
 $("#nextButton").on("click",function(){
  if(currentQuestion<bank.length){showNewCard();}
  else{displayFinalMessage();}
 });//click function
}

function togglePosition(){
 if($("#card1").position().top==-200){$("#card1").css("top","200px");};
}

function togglePosition2(){
 if($("#card2").position().top==-200){$("#card2").css("top","200px");};
}

function displayFinalMessage(){
 $("#buttonArea").empty();
 $("#cardArea").empty();
 $("#cardArea").append('<div id="finalMessage">end of deck</div>');
}

function buildBankFromJson(data) {
// TODO: adjust this structure to json actually generated by controllers
//  questionlist is the top-level key in the json - see sample.json
//  cardfront and cardback are the next level nested keys
 for(i=0;i<data.questionlist.length;i++){
   bank[i]=[];
   bank[i][0]=data.questionlist[i].cardfront;
   bank[i][1]=data.questionlist[i].cardback;
  }
}

function buildBankFromCsv(data) {
 var allRows = data.split(/\r?\n|\r/);

 // load all the data in the bank; start at index 1 to ignore the header row
 for (var sourceRow=1; sourceRow<allRows.length; sourceRow++) {

  // We are starting at index 1 in the csv data, but we want to start building the bank with index 0
   var bankRow = sourceRow - 1;
   bank[bankRow]=allRows[sourceRow].split(',');
 }
}

});